+article("3D","3D Objects")
  +section("3D")
    :markdown
      ## 3D

      The 3D widget allows you to add 3D visualizations to your textbooks

      ### Usage:
      ```jade
      +three-d(options)
      ```

      ### Options:
      * `continuousRender`: Continuously re-renders the scene at 60fps even when it's not needed (this should be used for debugging only). Defaults to `false`
      * `rotationSpeed`: The speed of the object's showroom rotation in radians/second. Use a negative value to change direction. Defaults to `0.5`
      * `rotationAxis`: Unit vector corresponding to the showroom rotation axis. Defaults to `[0, 1, 0]` (rotate along the vertical axis)
      * `cameraPosition`: The camera's position in space. Defaults to `[0, 0, 5]` 
      * `cameraLookAt`: The point in space where the camera is directed at. Defaults to `[0, 0, 0]` 
      * `enableInput`: Allows the user to rotate the object. Defaults to `true`
      * `ambientLight`: The color and intensity of the ambient light in hex notation. Defaults to `0x404040`
      * `backgroundColor`: The color of the background in hex notation. Defaults to `undefined`. `undefined` means transparency.
      * `lights`: An array of lights. Defaults to a directional light and a point light pointing from `[-3, 1, 3]` and `[3, 1, 3]`. Both white.
      * `url`: URL to a THREE.js [JSON Object/Scene format 4](https://github.com/mrdoob/three.js/wiki/JSON-Object-Scene-format-4) file containing an object (NOT A SCENE) at the root. Defaults to a green 1x1x1 cube.
      * `width`: CSS expression specifying the width of the widget
      * `height`: CSS expression specifying the height of the widget
      * `aspectRatio`: The desired aspect ratio (width/height) of the widget. Defaults to `4/3`

      ### Lights:
      Lights are JSON objects of with the following fields:
      * `type`: One of `'point'` or `'directional'`. Point lights are positioned at a fixed location in space and shine dimmer with distance (like a light bulb). Directional lights are positioned at infinity and shine with constant intensity from a specified direction (like the sun). Defaults to `point`.
      * `position`: The light's position (or direction if `type` is `'directional'`)
      * `intensity`: The light's intensity. Defaults to `1.0` for point lights and `0.5` for directional lights.
      * `color`: The light's color in hex notation. Defaults to `0xffffff` (white)
      * `distance`: A point light's maximum reach. Intensity will linearily decay from `intensity` (right near the light) to zero (at `distance`). Defaults to `5`

      If you only have one light in your scene, you can specify the light's options directly in the `options` object like this: 
      ```jade
      +three-d({
        lightType: 'directional',
        lightColor: 0xcc2222, //red-ish
        lightPosition: [0, -3, 0], //from the bottom
        intensity: 0.3, //pretty dim
      })
      ```

      ### Responsive layout
      Since CSS doesn't allow fixing an aspect ratio while allowing for flexible width, we added 3 options: `width`, `height`, `aspectRatio`. Setting either two of these parameters is enough to fully define the widget's size. Percentages (or any CSS unit) are allowed for `width` and `height`. By default, `width` is set to `100%`, `aspectRatio` to `4/3` while `height` is not defined, meaning that the widget will always span the full width of its container, adjusting its height dynamically so that a `4:3` aspect ratio is preserved.

      You should never touch the width and height of a `three-d` widget with CSS. If you can't do with the options, use CSS on a container of the widget.

      ### Simple Example:

      **Code**
      ```jade
      +three-d({
        name: 'simple-example',
      })
      ```

      **Style**
      ```stylus
      .three-d.simple-example
        width: 100%
        height: 400px
      ```

      **Rendered exercise**

    +three-d({
      name: 'simple-example',
    })

    :markdown
      ### Advanced Example:

      **Code**
      ```jade
      +three-d({
        url: '3d/mug/mug.json',
        name: 'advanced-example',
        backgroundColor: '#eeeeee',
        lights: [
          {
            type: 'directional',
            color: 0xcc2222, //red-ish
            position: [0, -1, 0], //from the bottom
            intensity: 0.3, //pretty dim
          },
          {
            type: 'directional',
            position: [0, 0, 1], //from behind the camera
            intensity: 0.1, //just a tad
          },
          {
            type: 'point',
            position: [3, 1, 3], //front-right
          },
          {
            type: 'point',
            position: [-3, 1, 3], //front-left
          },
        ],
      })
      ```

      **Style**
      ```stylus
      .three-d.advanced-example
        width: 100%
        height: 400px
      ```

      **Rendered exercise**

    +three-d({
      url: '3d/mug/mug.json',
      name: 'advanced-example',
      backgroundColor: '#eeeeee',
      lights: [
        {
          type: 'directional',
          color: 0xcc2222, //red-ish
          position: [0, -1, 0], //from the bottom
          intensity: 0.3, //pretty dim
        },
        {
          type: 'directional',
          position: [0, 0, 1], //from behind the camera
          intensity: 0.1, //just a tad
        },
        {
          type: 'point',
          position: [3, 1, 3], //front-right
        },
        {
          type: 'point',
          position: [-3, 1, 3], //front-left
        },
      ],
    })
