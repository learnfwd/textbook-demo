registerChapter({ chapter: "ch02-long-story-ch04-technical-03-exercises-99-advanced-99-extras", content: function () { return "<h1 id=\"advanced-operations\">Advanced operations</h1>\n<p>There are some cases where you need to change how the score is computed, how\nthe exercise is rendered, and so on. </p>\n<p>Fortunately, you can totally do that. First read &quot;Developer&#39;s Corner&quot; below, then\n&quot;Customizing scores, rendering, etc.&quot; section.</p>\n<h2 id=\"developer-s-corner\">Developer&#39;s corner</h2>\n<h3 id=\"exercise-lifecycle\">Exercise lifecycle</h3>\n<p>Even if it&#39;s not directly needed to know all details about how exercises\nare done technically, it is useful to understand some of therir concepts.</p>\n<p>Exercises are implemented as a combination of JavaScript and HTML code.\nBefore and after each exercise there are script tags that intitialize and\nconfigure the exercises and their relationships. Each exercise type \ninherits from the <code>Exercise</code> (<code>+exercise</code>) class.</p>\n<p>The JavaScript part, <code>Exercise</code> class is a BackBone model. So it has all\nthe models functions, such as <em>intitialize</em>, <em>set</em> or <em>get</em></p>\n<p>Each exercise has a lifecycle that begins even before the page is displayed.\nAn exercise developer can hook before or after lifecycle events as needed\nby creating methods on its Exercise inherited class.</p>\n<p>First, an exercise <em>intitialize</em>s, before the page is rendered. The hook\nis called <code>componentDidInitialize</code>, caled immediately before the base\nintitialize method is finished. You have access to exercise parameters\nand some of its data.</p>\n<p>When DOM is rendered, there is a callback on the exercise (done via <em>jQuery</em>)\nThis callback sets <code>isMounted</code> property to <code>true</code>, sets <code>$el</code> property to\npoint to the jQuery object of the exercise DOM element. After that it calls\nyour <code>componentDidMount</code> method (if it exists), and then it goes to the\nrendering part.</p>\n<p><code>componentDidMount</code> can be used to put some logic and just before the component\nis rendered using its current state.</p>\n<p><em>Rendering</em> is a process that updates the view of the component using its\ninternal state (stored via setters and getters). This option was chosen\nin order to have the exercise state separated by its view so the view can\nbe changed or restored at any time. It also allows reactivity, since\nrendering is redone automatically each time an attributes of the exercise\nis changed via <code>set</code> method. There are three hooks available for you when\nyou write your own exercise type:</p>\n<ul>\n<li><code>componentWillUpdate()</code> called when </li>\n<li><code>render()</code></li>\n<li><code>componentDidUpdate()</code></li>\n</ul>\n<p>There is no unmounting functionality, because it is not yet needed.</p>\n<p>Storage and retrieval of the component (exercise) attributes is done\nautomatically, without any intevention from your side. Stick to this\nnon-interventionist policy, because in the future there is more to\ncome (such as online sync).</p>\n<p>There is another optional method, <code>onChildrenReady</code> that is called\nonce all the children are added to the exercise. Use it whenever\nworking with children is necessary.</p>\n<p><em>Scoring</em> is a feature specific to each exercise type, so it is your\nresponsibility to write a <code>score()</code> function that returns an integer\nfrom 0 to 100 (0 is bad, 100 is perfect). There are no hard checks on\nthese limits, but you can mess up computations if you don&#39;t respect\nthis convention. So return a negative score or one greater</p>\n<p><strong>Useful Properties &amp; Methods </strong></p>\n<ul>\n<li><code>isMounted</code> -- <em>true</em> if DOM has rendered, <em>false</em> otherwise</li>\n<li><code>_score()</code> -- gets the score, also available as <code>this.get(&#39;score&#39;)</code></li>\n<li><code>value()</code> -- Value of the exercise should return what is the \ncurrent selected or computed value. By default, the value\nreturn is the state. Override if necessary (e.g. for pick-ones)</li>\n</ul>\n<h3 id=\"helper-api-exercises-class\">Helper API. <code>Exercises</code> class</h3>\n<p>There is also a helper class called &#39;Exercises&#39;. It provides methods\nto save and retrieve state, to manage the hierachical structure etc.\nTherse are however not needed usually.</p>\n<p>What you need to know is that there are some interesting methods\nthat can be used to get info about exercises:</p>\n<ul>\n<li><code>Exercises</code> is a global variable (object), accessible everywhere</li>\n<li>Each exercise type registers its constructor as an attribute of this\nobject. (e.g. <em>Exercises.YesNo</em> and <em>Exercises.PickOne</em>)</li>\n<li><code>Exercises.findIdByName(name)</code> finds the exercise id using its name</li>\n<li><code>Exercises.getAttributesById(id)</code> or <code>getAttributesByName(name)</code> gets\n an JS object with the attributes\n of the exercise that has the id / namespecified as parameter</li>\n<li><code>Exercises.clearLocalStorage()</code> clears local saved data for all exercises\n useful when people want to transfer the instance to another person</li>\n<li><code>Exercises.deleteStorageForId(id)</code> clears the data with the key &#39;ex<em>123456&#39;\n **ex</em>** prefix must be included in the id.<h2 id=\"exercises-current\">Exercises.current</h2>\n</li>\n</ul>\n<p>Having understood the exercise lifecycle, you can use a special object, named\n<code>Exercises.current</code> to change the internals of the exercise you&#39;re working on.</p>\n<script>var ex_1996925280 = Exercises.push(new Exercises.Exercise(1996925280, '{\"name\":\"ch99_sample1\"}'));\n</script><div id=\"ex_1996925280\" class=\"exercise\"><div class=\"statement\">Write an word and a synonym for it</div><script>(function () {\n  var exercise = Exercises.push(new Exercises.Textline(318347150, '{\"name\":\"ch99_sample1_word\",\"pattern\":\"\\\\\\\\w+\",\"regex\":{},\"placeholder\":\"(your word here)\"}'));\n  if (true) {\n    try {\n      var DashboardLoader = require('exercise-dashboard-loader');\n    } catch (ex) {};\n    if (DashboardLoader) {\n      DashboardLoader('#ex_cdb_318347150', exercise);\n    }\n  }\n})();\n</script><div id=\"ex_cdb_318347150\" class=\"classroom-dashboard\"></div><div id=\"ex_318347150\" class=\"textline\"><div class=\"block\"><script>var wordExercise = Exercises.current;\n\n</script></div></div><script>Exercises.pop();</script><script>(function () {\n  var exercise = Exercises.push(new Exercises.Textline(1620804290, '{\"name\":\"ch99_sample1_synonym\",\"pattern\":\"\\\\\\\\w+\",\"regex\":{},\"placeholder\":\"(synonym for your word here)\"}'));\n  if (true) {\n    try {\n      var DashboardLoader = require('exercise-dashboard-loader');\n    } catch (ex) {};\n    if (DashboardLoader) {\n      DashboardLoader('#ex_cdb_1620804290', exercise);\n    }\n  }\n})();\n</script><div id=\"ex_cdb_1620804290\" class=\"classroom-dashboard\"></div><div id=\"ex_1620804290\" class=\"textline\"><div class=\"block\"><script>var synonymExercise = Exercises.current;\n</script></div></div><script>Exercises.pop();</script><div class=\"is-done-box\"></div><div id=\"plsWait\">Please enter a word in the first box and a synonym for it in the second</div><script>var self = Exercises.current;\nvar $plsWait = $('#plsWait');\n\n\nvar refreshData = function() {\n  $plsWait.text('please wait...');\n  self.process = function (result) {\n    var response = result && result.response;\n    var synonyms = '';\n    _.each(response, function(meaning) {\n        synonyms += meaning.list.synonyms + '|';\n      });\n    synonyms = synonyms.toLocaleLowerCase();\n    self.synonyms = synonyms;\n    self.$el.find('script').last();\n\n    synonymExercise.$input.find('input').attr('title', synonyms.replace('|', ', '));\n    \n    self.render();\n  }\n\n  var s = document.createElement(\"script\");\n  s.src = \"http://thesaurus.altervista.org/service.php?word=\" +\n     self.word +\n     \"&language=en_US&output=json&key=3Xj2J0HlX7PzxwLKQH8U&callback=self.process\";\n\n  self.$el.append(s);\n} \n\nvar checkSynonym = function() {\n  var word = wordExercise.value();\n  var syn = synonymExercise.value();\n\n  if (word && syn) {\n    word = word.toString().toLocaleLowerCase();\n    if(word.match(/^[a-z]+$/)){\n      if(word === self.word) {\n        self.render();\n      } else {\n        self.word = word;\n        refreshData();\n      }\n    } else {\n      $plsWait.text('please enter valid words (i.e. letters, no spaces)');\n    }\n  }\n  else {\n    $plsWait.text(\"C'mon, do your job, write something!\");\n  }\n};\n\nself.render = function () {\n  var syn = synonymExercise.value();\n  if(!self.synonyms || !self.word || !syn) {\n    $plsWait.text(\"Write the word then the synonym, you know it.\");\n    return;\n  } \n\n  var synRegex = RegExp('\\\\b' + syn + '\\\\b', 'i');\n  \n  console.log(syn, self.synonyms, self.synonyms.match(synRegex));\n\n  if(self.synonyms.match(synRegex)) {\n      $plsWait.text(\"Congrats! \" + syn + \" is a synonym for \" + self.word);\n      self.isDone = true;\n      self._score();\n    } else {\n      $plsWait.text(\"Woops! \" + syn + \" is not a synonym for \" + self.word);\n      self.isDone = false;\n      self._score();\n    }\n}\n\nself.score = function () {\n  return self.isDone ? 100 : 0;\n}\n\nsynonymExercise.on('change:state', checkSynonym);\ncheckSynonym();\n\n$('#checkSynonym').click(checkSynonym);\n</script></div><script>Exercises.pop();</script><h4 id=\"annotated-source\">Annotated source</h4>\n<pre><code>+exercise({name: &#39;ch99_sample1&#39;})\n  .statement Write an word and a synonym for it\n\n\n  +textline({\n    name: &#39;ch99_sample1_word&#39;,\n    pattern: /\\w+/,\n    regex: /\\w+/,\n    placeholder: &#39;(your word here)&#39;\n  })\n    //- This is executed right after the Exercise is\n    //- created as an object. We keep a reference to \n    //- the exercise in the wordExercise variable\n    //- to use later\n    script.\n      var wordExercise = Exercises.current;\n\n\n  +textline({\n    name: &#39;ch99_sample1_synonym&#39;,\n    pattern: /\\w+/,\n    regex: /\\w+/,\n    placeholder: &#39;(synonym for your word here)&#39;\n  })\n    script.\n      //- (same as above, but for the synonym)\n      var synonymExercise = Exercises.current;\n\n  .is-done-box\n  //- this div will be used for different announcements\n  #plsWait Please enter a word in the first box and a synonym for it in the second\n\n\n  script.\n    //- self is the &#39;ch99_sample1&#39; &lt;= +exercise\n    var self = Exercises.current;\n    var $plsWait = $(&#39;#plsWait&#39;);\n\n    //- function to refresh synonyms list\n    //- using a web service\n\n    var refreshData = function() {\n      $plsWait.text(&#39;please wait...&#39;);\n\n\n      // this is called back when the remote\n      // web service script is loaded\n      self.process = function (result) {\n        var response = result &amp;&amp; result.response;\n        var synonyms = &#39;&#39;;\n        _.each(response, function(meaning) {\n            synonyms += meaning.list.synonyms + &#39;|&#39;;\n          });\n\n        synonyms = synonyms.toLocaleLowerCase();\n        self.synonyms = synonyms;\n        self.$el.find(&#39;script&#39;).last();\n\n        //- when synonyms list is retrieved, we update\n        //- the tooltip for the synonyms list.\n        //- Yes, it works, try it!\n\n        synonymExercise.$input.find(&#39;input&#39;).attr(&#39;title&#39;, synonyms.replace(&#39;|&#39;, &#39;, &#39;));\n\n        self.render();\n      }\n\n      //- web service. calls back self.process function above\n      var s = document.createElement(&quot;script&quot;);\n      s.src = &quot;http://thesaurus.altervista.org/service.php?word=&quot; +\n         self.word +\n         &quot;&amp;language=en_US&amp;output=json&amp;key=3Xj2J0HlX7PzxwLKQH8U&amp;callback=self.process&quot;;\n\n      self.$el.append(s);\n    } \n\n    var checkSynonym = function() {\n      var word = wordExercise.value();\n      var syn = synonymExercise.value();\n\n      if (word &amp;&amp; syn) {\n        word = word.toString().toLocaleLowerCase();\n        if(word.match(/^[a-z]+$/)){\n          //- Don&#39;t load new synonyms unless the source word is \n          //- different.\n          if(word === self.word) {\n            self.render();\n          } else {\n            self.word = word;\n            refreshData();\n          }\n        } else {\n          $plsWait.text(&#39;please enter valid words (i.e. letters, no spaces)&#39;);\n        }\n      }\n      else {\n        $plsWait.text(&quot;C&#39;mon, do your job, write something!&quot;);\n      }\n    };\n\n    //- This override the render function for the exercise\n    //- No fuss about it, because +exercise does not have a\n    //- custom render function anyway.\n    //- If you need to override a +yesno, +pickone, etc.\n    //- try to have self.originalRender = self.render;\n    //- self.render = function {self.originalRender(); /* Your code here */}\n    self.render = function () {\n      var syn = synonymExercise.value();\n      if(!self.synonyms || !self.word || !syn) {\n        $plsWait.text(&quot;Write the word then the synonym, you know it.&quot;);\n        return;\n      } \n\n      var synRegex = RegExp(&#39;\\\\b&#39; + syn + &#39;\\\\b&#39;, &#39;i&#39;);\n\n      console.log(syn, self.synonyms, self.synonyms.match(synRegex));\n\n      if(self.synonyms.match(synRegex)) {\n          $plsWait.text(&quot;Congrats! &quot; + syn + &quot; is a synonym for &quot; + self.word);\n          self.isDone = true;\n          //- update the score, to reflect the success\n          self._score();\n        } else {\n          $plsWait.text(&quot;Woops! &quot; + syn + &quot; is not a synonym for &quot; + self.word);\n          //- or the failure\n          self.isDone = false;\n          self._score();\n        }\n    }\n\n    //- Override the score function\n    //- Please read self.render above\n    self.score = function () {\n      return self.isDone ? 100 : 0;\n    }\n\n    //- subcribe to state changes.\n    synonymExercise.on(&#39;change:state&#39;, checkSynonym);\n\n    //- run an initial check\n    checkSynonym();\n\n    $(&#39;#checkSynonym&#39;).click(checkSynonym);\n</code></pre><p>+section(&quot;Exercise events&quot;)</p>\n<h1 id=\"exercise-events\">Exercise events</h1>\n<p>Exercises trigger events whenever the score or the state changes. Other exercises can use this events system\nto interact with each other. Or areas in the books can be changed as a result</p>\n<p>The list of events triggered by the exercises is:</p>\n<ul>\n<li><p><code>exercise:state:changed</code>, data: new state, context: exercise</p>\n</li>\n<li><p><code>exercise:score:changed</code>,  data: new score, context: exercise</p>\n</li>\n<li><code>exercise:score:decrease</code>, data: new score, context: exercise</li>\n<li><p><code>exercise:score:increase</code>, data: new score, context: exercise</p>\n</li>\n<li><p><code>exercise:done</code>, data: exercise, context: none</p>\n</li>\n<li><code>exercise:first-time-done</code>, data: exercise, context: none</li>\n</ul>\n<p>How to use:</p>\n<pre><code>  window.App.on(&#39;exercise:score:changed exercise:state:changed&#39;, function(data, exercise){\n    console.log(&#39;event!&#39;, data, exercise.id);\n  });\n</code></pre><p>And an advanced example, rendered below:</p>\n<pre><code>  +textline({name: &#39;extras99-1&#39;, pattern: /\\d/, regexp: /\\d/})\n    +textline({name: &#39;extras99-2&#39;, pattern: /\\d/, regexp: /\\d/})\n\n    p Entere a digit to get 100%, a letter or nothing to get 0:\n    p Score Output: \n      span#score-output\n    p State Output: \n      span#state-output\n\n    script.\n      window.App.on(&#39;exercise:score:changed&#39;, function(data, exercise){\n          var o = &#39;New score for exercise &#39; + exercise.name + &#39; is &#39; + data;\n          $(&#39;#score-output&#39;).text(o);\n      });\n\n      window.App.on(&#39;exercise:state:changed&#39;, function(data, exercise){\n          var o = &#39;New state for exercise &#39; + exercise.name + &#39; is &#39; + data;\n          $(&#39;#state-output&#39;).text(o);\n      });\n\n      window.App.on(&#39;exercise:score:changed &#39;, function(score, exercise){\n        if(exercise.name !== &#39;extras99-1&#39;) {\n          return;\n        }\n\n        if(score &lt; 100){\n          $(&#39;.extras99-2&#39;).hide();\n        }\n        else {\n          $(&#39;.extras99-2&#39;).show();\n        }\n      });\n      window.App.trigger(&#39;exercise:score:invalidate&#39;, &#39;extras99-1&#39;);\n</code></pre><p><strong>Rendered sample:</strong></p>\n<p>+textline({name: &#39;extras99-1&#39;, pattern: /\\d/, regexp: /\\d/})\n+textline({name: &#39;extras99-2&#39;, pattern: /\\d/, regexp: /\\d/})</p>\n<p>p Enter a digit to get 100%, a letter or nothing to get 0:\np Score Output: </p>\n<span id=\"score-output\"><p>State Output: </p></span><span id=\"state-output\"></span><script>window.App.on('exercise:score:changed', function(data, exercise){\n    var o = 'New score for exercise ' + exercise.name + ' is ' + data;\n    $('#score-output').text(o);\n});\n\nwindow.App.on('exercise:state:changed', function(data, exercise){\n    var o = 'New state for exercise ' + exercise.name + ' is ' + data;\n    $('#state-output').text(o);\n});\n\nwindow.App.on('exercise:score:changed ', function(score, exercise){\n  if(exercise.name !== 'extras99-1') {\n    return;\n  }\n\n  if(score < 100){\n    $('.extras99-2').hide();\n  }\n  else {\n    $('.extras99-2').show();\n  }\n});\n\nwindow.App.trigger('exercise:score:invalidate', 'extras99-1');</script>"; }});